
R version 4.4.3 (2025-02-28) -- "Trophy Case"
Copyright (C) 2025 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin20

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> source(file.path("aammrtf", "mock.R"))
> source(file.path("_helper", "init.R"))
> source(file.path("_helper", "pkgs.R"))
Install Packages
Setup Demos
> 
> # Mostly makes sure the demo steps work, but since it is a convenient way of
> # generating a unitizer with actual errors and so forth, we use it to test a few
> # other things as well in the context of those unitizers
> 
> # - "in_pkg" -------------------------------------------------------------------
> 
> base.dir <- file.path(FLM, "tests", "extra")
> in.pkg.file <- file.path(base.dir, "inpkg.R")
> 
> unitizer:::read_line_set_vals(c("Q"))
> txt1 <- unitizer:::capture_output(unitize(in.pkg.file, interactive.mode = TRUE))
> # `sub` needed due to inconsistencies in R 3.4 and 3.3 for top level error
> # messages
> txt1$message <- sub("^Error.*:", "", txt1$message)
> txt1
- Output -----------------------------------------------------------------------


+------------------------------------------------------------------------------+
| unitizer for: extra/inpkg.R                                                  |
+------------------------------------------------------------------------------+

             Pass Fail  New
 <untitled>     -    -    1
...........................
                -    -    1

- New --------------------------------------------------------------------------

| The following test is new. Add test to store ([Y]es, [N]o, [P]rev, [B]rowse, 
| [R]erun, [Q]uit, [H]elp)?

# should fail normally, but return TRUE if run in fastlm

> library(utzflm, lib.loc = getOption("unitizer.tmp.lib.loc"))
> hidden_fun()

unitizer> Q

| unitizer unchanged.

- Message ----------------------------------------------------------------------

 could not find function "hidden_fun"
| No changes recorded.
> unitizer:::read_line_set_vals(c("Q"))
> unitize(in.pkg.file, state = in_pkg(), interactive.mode = TRUE)

+------------------------------------------------------------------------------+
| unitizer for: extra/inpkg.R                                                  |
+------------------------------------------------------------------------------+

             Pass Fail  New
 <untitled>     -    -    1
...........................
                -    -    1

- New --------------------------------------------------------------------------

| The following test is new. Add test to store ([Y]es, [N]o, [P]rev, [B]rowse, 
| [R]erun, [Q]uit, [H]elp)?

# should fail normally, but return TRUE if run in fastlm

> library(utzflm, lib.loc = getOption("unitizer.tmp.lib.loc"))
> hidden_fun()
[1] TRUE

unitizer> Q

| No changes recorded.
| unitizer unchanged.

> unitizer:::read_line_set_vals(c("Q"))
> try(unitize(in.pkg.file, state = in_pkg("ASDFASDFA"), interactive.mode = TRUE))

Error in loadNamespace(name) : there is no package called 'ASDFASDFA'
Error in in_pkg_to_env(x.raw@par.env, test.files) : 
  Unable to load "ASDFASDFA" namespace to use as parent environment; see `?
unitizerState` for instructions on how to specify a package namespace as a 
parent environment for tests.
Error in as.state(state, test.files) : 
  Unable to convert `par.env` value to a namespace environment
Error in unitize_core(test.file.inf, list(store.id.inf), state = state,  : 
  Argument `state` could not be evaluated.
> 
> # - "copy fastlm dir works" ----------------------------------------------------
> 
> sort(tolower(list.files(".")))
[1] "description"   "man"           "namespace"     "r"            
[5] "tests"         "utzflm.rcheck"
> readLines(file.path(".", "DESCRIPTION"))[[5L]]  # v0.1.0
[1] "Version: 0.1.0"
> update_fastlm(".", version = "0.1.1")
> readLines(file.path(".", "DESCRIPTION"))[[5L]]
[1] "Version: 0.1.1"
> update_fastlm(".", version = "0.1.2")
> readLines(file.path(".", "DESCRIPTION"))[[5L]]
[1] "Version: 0.1.2"
> 
> # - "show_file" ----------------------------------------------------------------
> 
> f <- tempfile()
> cat("this is a\ntest code\nfile\n", file = f)
> file.show <- capture.output(show_file(f))
> file.show[[1L]]
[1] "+---------------+"
> start.file <- grep("+---+-----------+", file.show, fixed = TRUE)
> length(start.file)  # 2
[1] 2
> writeLines(file.show[start.file[[1L]]:start.file[[2L]]])
+---+-----------+
| 1 | this is a |
| 2 | test code |
| 3 | file      |
+---+-----------+
> unlink(f)
> 
> # Run actual demo bits; note we want to force `interactive.mode=TRUE` so that
> # `read_line_vals` values are used as user input; note that until we fix
> # / rationalize how sinking behaves within unitizer when the standard streams
> # come in sunk, we won't be able to fully test everything, since for example
> # the display of the captured stdout just won't happen.
> 
> # - "demo create worked" -------------------------------------------------------
> 
> # In tests, initial version of package should be 0.1.0; the test store
> # does not exist so it doesn't get overwritten with subsequent updates
> # Note the initial install happens in the test running script
> 
> unitizer:::update_fastlm(".", version = "0.1.0")
> inst_pak(".")
> unitizer:::read_line_set_vals(c("Y", "Y"))
> untz <- unitize(FLM.TEST.FILE, interactive.mode = TRUE)

+------------------------------------------------------------------------------+
| unitizer for: unitizer/fastlm1.R                                             |
+------------------------------------------------------------------------------+

             Pass Fail  New
 <untitled>     -    -    1
...........................
                -    -    1

- New --------------------------------------------------------------------------

| The following test is new. Add test to store ([Y]es, [N]o, [P]rev, [B]rowse, 
| [R]erun, [Q]uit, [H]elp)?

# Assignments and calls to `library` are not considered tests by
# `unitizer` so you will not need to review them

> library(utzflm, lib.loc = getOption("unitizer.tmp.lib.loc"))
> dat <- data.frame(x = 1:100, y = (1:100)^2)
> res <- fastlm(dat$x, dat$y)

# The `unitizer>` prompt is like the standard R prompt. You may
# enter expressions such as `lm(y ~ x, dat)$coefficients`, or
# `str(res)`.
#
# Once you are done reviewing, you need to tell `unitizer` you
# accept the test by typing 'Y' at the prompt.  Enter 'H' for help.

> res
intercept     slope       rsq 
-1717.000   101.000     0.939 
attr(,"class")
[1] "fastlm"

unitizer> Y

= Finalize Unitizer ============================================================

| You will IRREVERSIBLY modify 'unitizer/fastlm1.unitizer' by:
| - Adding 1 out of 1 new tests

| Update unitizer ([Y]es, [N]o, [P]rev, [B]rowse, [R]erun)?

unitizer> Y

@zero.env
  0x00000000
  base
@base.env
  0x00000000
  0x00000000
  base
@global
  Reference class object of class "unitizerGlobal"
  namespace:unitizer
  0x00000000
  namespace:base
  R_GlobalEnv
  package:unitizer
  package:stats
  package:graphics
  package:grDevices
  package:utils
  package:datasets
  package:methods
  0x00000000
  base
@items.new@base.env
    0x00000000
    0x00000000
    0x00000000
    base
@items.ref@base.env
    0x00000000
    0x00000000
    0x00000000
    base
@items.ref@.items[[1]]@env
        0x00000000
        0x00000000
        0x00000000
        0x00000000
        base
@items.ref@.items[[2]]@env
        0x00000000
        0x00000000
        0x00000000
        0x00000000
        base
@items.ref@.items[[3]]@env
        0x00000000
        0x00000000
        0x00000000
        0x00000000
        base
@items.ref@.items[[4]]@env
        0x00000000
        0x00000000
        0x00000000
        0x00000000
        base
@zero.env
  0x00000000
  base
@base.env
  0x00000000
  0x00000000
  base
@items.new@base.env
    0x00000000
    0x00000000
    0x00000000
    base
@items.ref@base.env
    0x00000000
    0x00000000
    0x00000000
    base
@items.ref@.items[[1]]@env
        0x00000000
        0x00000000
        0x00000000
        0x00000000
        base
@items.ref@.items[[2]]@env
        0x00000000
        0x00000000
        0x00000000
        0x00000000
        base
@items.ref@.items[[3]]@env
        0x00000000
        0x00000000
        0x00000000
        0x00000000
        base
@items.ref@.items[[4]]@env
        0x00000000
        0x00000000
        0x00000000
        0x00000000
        base
| unitizer updated.

> untz
Test File: tests/unitizer/fastlm1.R
Store ID: tests/unitizer/fastlm1.unitizer

  id                           call ignored status user reviewed
1  1 library(utzflm, lib.loc = g...       *    New    N    FALSE
2  2 dat <- data.frame(x = 1:100...       *    New    N    FALSE
3  3    res <- fastlm(dat$x, dat$y)       *    New    N    FALSE
4  4                            res            New    Y     TRUE
> 
